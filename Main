

Introduction

Blockchain technology has revolutionized decentralized applications by providing immutable data storage and trustless interactions. In this tutorial, we will build a full-fledged blockchain using Python, MongoDB, and Ditto. We will implement the following features:

Features:

Distributed Consensus Between Multiple Nodes

Smart Contract Execution

JWT Authentication for API Security

Efficient Mining Using Multi-threading

Peer-to-Peer Communication

Ethereum Smart Contract Integration via Web3.py

Blockchain Visualization with a Frontend

IPFS for Decentralized Storage

Smart Contract Deployment UI

Tokenization (ERC20/721)

Step 1: Setting Up the Project

Install Dependencies

Ensure you have Python installed and install the required libraries:

pip install flask flask-jwt-extended pymongo ditto-py web3 threading ipfshttpclient

Project Structure

blockchain_project/
│── app.py             # Main blockchain API
│── blockchain.py      # Blockchain logic
│── node.py            # Node communication
│── smart_contracts.py # Smart contract execution
│── authentication.py  # JWT authentication
│── mining.py          # Multi-threaded mining
│── p2p.py             # Peer-to-peer communication
│── storage.py         # IPFS integration
│── frontend/
│   ├── index.html     # UI for blockchain visualization
│   ├── smart_ui.html  # UI for smart contract deployment
│   ├── tokens_ui.html # UI for tokenization
└── db_config.py       # MongoDB configuration

Step 2: Implementing the Blockchain

blockchain.py – Blockchain Data Structure

import hashlib
import json
import time
import pymongo
from uuid import uuid4

class Blockchain:
    def __init__(self):
        self.client = pymongo.MongoClient("mongodb://localhost:27017/")
        self.db = self.client["blockchain_db"]
        self.chain = self.db["blocks"]
        if self.chain.count_documents({}) == 0:
            self.create_genesis_block()

    def create_genesis_block(self):
        block = {
            'index': 0,
            'timestamp': str(time.time()),
            'transactions': [],
            'proof': 1,
            'previous_hash': "0"
        }
        block['hash'] = self.hash(block)
        self.chain.insert_one(block)

    def create_block(self, proof, previous_hash):
        block = {
            'index': self.chain.count_documents({}),
            'timestamp': str(time.time()),
            'transactions': [],
            'proof': proof,
            'previous_hash': previous_hash,
        }
        block['hash'] = self.hash(block)
        self.chain.insert_one(block)
        return block

    @staticmethod
    def hash(block):
        encoded_block = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(encoded_block).hexdigest()

Step 3: Implementing Distributed Consensus

node.py – Peer-to-Peer Communication

from flask import Flask, request, jsonify
import requests
from blockchain import Blockchain

app = Flask(__name__)
blockchain = Blockchain()
nodes = set()

@app.route('/nodes/register', methods=['POST'])
def register_nodes():
    values = request.get_json()
    nodes.update(values.get('nodes', []))
    return jsonify({'message': 'Nodes registered', 'total_nodes': list(nodes)}), 201

@app.route('/nodes/resolve', methods=['GET'])
def consensus():
    for node in nodes:
        response = requests.get(f'http://{node}/chain')
        length = response.json()['length']
        if length > blockchain.chain.count_documents({}):
            blockchain.chain.delete_many({})
            for block in response.json()['chain']:
                blockchain.chain.insert_one(block)
    return jsonify({'message': 'Chain updated'}), 200

Step 4: Adding Smart Contracts

smart_contracts.py – Deploy and Interact with Ethereum Smart Contracts

from web3 import Web3
import json

w3 = Web3(Web3.HTTPProvider("https://ropsten.infura.io/v3/YOUR_INFURA_PROJECT_ID"))
contract_address = "0xYourContractAddress"
abi = json.loads(open("contract_abi.json").read())
contract = w3.eth.contract(address=contract_address, abi=abi)

def call_smart_contract(method_name, *args):
    return contract.functions[method_name](*args).call()

Step 5: Implementing JWT Authentication

authentication.py – Secure API

from flask_jwt_extended import JWTManager, create_access_token
from flask import Flask, request

app = Flask(__name__)
app.config['JWT_SECRET_KEY'] = 'your_secret_key'
jwt = JWTManager(app)

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get("username")
    if username == "admin":
        token = create_access_token(identity=username)
        return {'access_token': token}, 200
    return {'error': 'Unauthorized'}, 401

Step 6: Integrating IPFS for Decentralized Storage

storage.py – IPFS Integration

import ipfshttpclient

def upload_to_ipfs(file_path):
    client = ipfshttpclient.connect()
    return client.add(file_path)

Step 7: Multi-threaded Mining

mining.py – Optimize Mining

import threading
from blockchain import Blockchain

def mine():
    blockchain = Blockchain()
    while True:
        last_block = blockchain.chain.find().sort("index", -1)[0]
        proof = blockchain.proof_of_work(last_block['proof'])
        blockchain.create_block(proof, last_block['hash'])

threads = [threading.Thread(target=mine) for _ in range(4)]
for t in threads:
    t.start()

Step 8: Frontend and Tokenization UI

Create an HTML/JavaScript frontend to interact with the blockchain and deploy ERC20/721 tokens.



